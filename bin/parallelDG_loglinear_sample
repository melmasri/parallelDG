#!/usr/bin/env python

"""
Generate a Markov chain from Metropolis-Hastings trajectories
parameter settings.
"""

import numpy as np
import pandas as pd

import parallelDG.mh_parallel as ps


def main(data_filename,
         trajectory_length,
         randomize,
         pseudo_obs,
         output_directory,
         output_filename,
         output_format,
         seed,
         parallel,
         graph_prior,
         reset_cache=True,
         reps=1,
         **args):

    saved_args = locals()
    print("saved_args is", saved_args)
    
    df = pd.read_csv(data_filename, sep=',', header=[0, 1])
    print("results to be saved to " + output_directory)
    if seed is not None:
        np.random.seed(seed)

    if not isinstance(trajectory_length, list):
        trajectory_length = list(trajectory_length)

    if not isinstance(randomize, list):
        randomize = list(randomize)

    if not isinstance(pseudo_obs, list):
        pseudo_obs = list(pseudo_obs)

    if parallel:
        ps.sample_trajectories_loglin_parallel(df,
                                               n_samples=trajectory_length,
                                               randomize=randomize,
                                               pseudo_obs=pseudo_obs,
                                               reset_cache=True,
                                               reps=reps,
                                               graph_prior=graph_prior,
                                               output_directory=output_directory,
                                               output_filename=output_filename,
                                               output_format=output_format)
    else:
        ps.sample_trajectories_loglin_to_file(df,
                                              n_samples=trajectory_length,
                                              randomize=randomize,
                                              pseudo_obs=pseudo_obs,
                                              reset_cache=True,
                                              graph_prior=graph_prior,
                                              reps=reps,
                                              output_directory=output_directory,
                                              output_filename=output_filename,
                                              output_format=output_format)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser("Generate particle Gibbs trajectories och decomposable graphs.")

    parser.add_argument('-M',
                        '--trajectory_length',
                        type=int,
                        required=True,
                        nargs='+',
                        help="Number of samples")

    parser.add_argument('-R',
                        '--randomize',
                        type=int,
                        required=True,
                        nargs='+',
                        help="Steps when junction tree is randomized ")
    parser.add_argument(
        '-p', '--graph_prior',
        required=False,
        default=['mbc', 2.0, 4.0],
        nargs='+',
        help="graph prior (mbc = modifiedBornnCaron. args = {mbc clq_param sep param, edgepenalty param}")
    parser.add_argument(
        '-f', '--data_filename',
        required=True,
        help="Filename of dataset stored as row vectors och floats. "
    )
    parser.add_argument(
        '-F', '--output_filename',
        required=False,
        help="Output filename"
    )
    parser.add_argument(
        '-o', '--output_directory',
        required=False, default=".",
        help="Output directory"
    )
    parser.add_argument(
        '-t', '--output_format',
        required=False,
        help="Output format (option = benchpress, or None)"
    )
    parser.add_argument(
        '-s', '--seed',
        type=int, required=False, default=None
    )
    parser.add_argument(
        '--pseudo_obs',
        type=float, required=False, default=[1.0], nargs='+',
        help="Total number of pseudo observations"
    )
    parser.add_argument(
        '--reps',
        type=int, required=False, default=1,
        help='Number of trajectories to sample for each parameter setting'
    )
    parser.add_argument(
        '--parallel',
        required=False,
        action="store_true",
        default=False,
        help="run MCMC on parallel processes."
    )
    parser.add_argument(
        '--reset_cache',
        required=False, default=True, action="store_true",
        help="Reset the cache in each iteration"
    )

    args = parser.parse_args()
    main(**args.__dict__)
